{"ast":null,"code":"'use strict';\n\n/**\n * Font RegExp helpers.\n */\nconst weights = 'bold|bolder|lighter|[1-9]00';\nconst styles = 'italic|oblique';\nconst variants = 'small-caps';\nconst stretches = 'ultra-condensed|extra-condensed|condensed|semi-condensed|semi-expanded|expanded|extra-expanded|ultra-expanded';\nconst units = 'px|pt|pc|in|cm|mm|%|em|ex|ch|rem|q';\nconst string = '\\'([^\\']+)\\'|\"([^\"]+)\"|[\\\\w\\\\s-]+';\n\n// [ [ <‘font-style’> || <font-variant-css21> || <‘font-weight’> || <‘font-stretch’> ]?\n//    <‘font-size’> [ / <‘line-height’> ]? <‘font-family’> ]\n// https://drafts.csswg.org/css-fonts-3/#font-prop\nconst weightRe = new RegExp(`(${weights}) +`, 'i');\nconst styleRe = new RegExp(`(${styles}) +`, 'i');\nconst variantRe = new RegExp(`(${variants}) +`, 'i');\nconst stretchRe = new RegExp(`(${stretches}) +`, 'i');\nconst sizeFamilyRe = new RegExp(`([\\\\d\\\\.]+)(${units}) *((?:${string})( *, *(?:${string}))*)`);\n\n/**\n * Cache font parsing.\n */\n\nconst cache = {};\nconst defaultHeight = 16; // pt, common browser default\n\n/**\n * Parse font `str`.\n *\n * @param {String} str\n * @return {Object} Parsed font. `size` is in device units. `unit` is the unit\n *   appearing in the input string.\n * @api private\n */\n\nmodule.exports = str => {\n  // Cached\n  if (cache[str]) return cache[str];\n\n  // Try for required properties first.\n  const sizeFamily = sizeFamilyRe.exec(str);\n  if (!sizeFamily) return; // invalid\n\n  // Default values and required properties\n  const font = {\n    weight: 'normal',\n    style: 'normal',\n    stretch: 'normal',\n    variant: 'normal',\n    size: parseFloat(sizeFamily[1]),\n    unit: sizeFamily[2],\n    family: sizeFamily[3].replace(/[\"']/g, '').replace(/ *, */g, ',')\n  };\n\n  // Optional, unordered properties.\n  let weight, style, variant, stretch;\n  // Stop search at `sizeFamily.index`\n  const substr = str.substring(0, sizeFamily.index);\n  if (weight = weightRe.exec(substr)) font.weight = weight[1];\n  if (style = styleRe.exec(substr)) font.style = style[1];\n  if (variant = variantRe.exec(substr)) font.variant = variant[1];\n  if (stretch = stretchRe.exec(substr)) font.stretch = stretch[1];\n\n  // Convert to device units. (`font.unit` is the original unit)\n  // TODO: ch, ex\n  switch (font.unit) {\n    case 'pt':\n      font.size /= 0.75;\n      break;\n    case 'pc':\n      font.size *= 16;\n      break;\n    case 'in':\n      font.size *= 96;\n      break;\n    case 'cm':\n      font.size *= 96.0 / 2.54;\n      break;\n    case 'mm':\n      font.size *= 96.0 / 25.4;\n      break;\n    case '%':\n      // TODO disabled because existing unit tests assume 100\n      // font.size *= defaultHeight / 100 / 0.75\n      break;\n    case 'em':\n    case 'rem':\n      font.size *= defaultHeight / 0.75;\n      break;\n    case 'q':\n      font.size *= 96 / 25.4 / 4;\n      break;\n  }\n  return cache[str] = font;\n};","map":{"version":3,"names":["weights","styles","variants","stretches","units","string","weightRe","RegExp","styleRe","variantRe","stretchRe","sizeFamilyRe","cache","defaultHeight","module","exports","str","sizeFamily","exec","font","weight","style","stretch","variant","size","parseFloat","unit","family","replace","substr","substring","index"],"sources":["/Users/Fia/opt/my-react-weather-app/node_modules/canvas/lib/parse-font.js"],"sourcesContent":["'use strict'\n\n/**\n * Font RegExp helpers.\n */\n\nconst weights = 'bold|bolder|lighter|[1-9]00'\nconst styles = 'italic|oblique'\nconst variants = 'small-caps'\nconst stretches = 'ultra-condensed|extra-condensed|condensed|semi-condensed|semi-expanded|expanded|extra-expanded|ultra-expanded'\nconst units = 'px|pt|pc|in|cm|mm|%|em|ex|ch|rem|q'\nconst string = '\\'([^\\']+)\\'|\"([^\"]+)\"|[\\\\w\\\\s-]+'\n\n// [ [ <‘font-style’> || <font-variant-css21> || <‘font-weight’> || <‘font-stretch’> ]?\n//    <‘font-size’> [ / <‘line-height’> ]? <‘font-family’> ]\n// https://drafts.csswg.org/css-fonts-3/#font-prop\nconst weightRe = new RegExp(`(${weights}) +`, 'i')\nconst styleRe = new RegExp(`(${styles}) +`, 'i')\nconst variantRe = new RegExp(`(${variants}) +`, 'i')\nconst stretchRe = new RegExp(`(${stretches}) +`, 'i')\nconst sizeFamilyRe = new RegExp(\n  `([\\\\d\\\\.]+)(${units}) *((?:${string})( *, *(?:${string}))*)`)\n\n/**\n * Cache font parsing.\n */\n\nconst cache = {}\n\nconst defaultHeight = 16 // pt, common browser default\n\n/**\n * Parse font `str`.\n *\n * @param {String} str\n * @return {Object} Parsed font. `size` is in device units. `unit` is the unit\n *   appearing in the input string.\n * @api private\n */\n\nmodule.exports = str => {\n  // Cached\n  if (cache[str]) return cache[str]\n\n  // Try for required properties first.\n  const sizeFamily = sizeFamilyRe.exec(str)\n  if (!sizeFamily) return // invalid\n\n  // Default values and required properties\n  const font = {\n    weight: 'normal',\n    style: 'normal',\n    stretch: 'normal',\n    variant: 'normal',\n    size: parseFloat(sizeFamily[1]),\n    unit: sizeFamily[2],\n    family: sizeFamily[3].replace(/[\"']/g, '').replace(/ *, */g, ',')\n  }\n\n  // Optional, unordered properties.\n  let weight, style, variant, stretch\n  // Stop search at `sizeFamily.index`\n  const substr = str.substring(0, sizeFamily.index)\n  if ((weight = weightRe.exec(substr))) font.weight = weight[1]\n  if ((style = styleRe.exec(substr))) font.style = style[1]\n  if ((variant = variantRe.exec(substr))) font.variant = variant[1]\n  if ((stretch = stretchRe.exec(substr))) font.stretch = stretch[1]\n\n  // Convert to device units. (`font.unit` is the original unit)\n  // TODO: ch, ex\n  switch (font.unit) {\n    case 'pt':\n      font.size /= 0.75\n      break\n    case 'pc':\n      font.size *= 16\n      break\n    case 'in':\n      font.size *= 96\n      break\n    case 'cm':\n      font.size *= 96.0 / 2.54\n      break\n    case 'mm':\n      font.size *= 96.0 / 25.4\n      break\n    case '%':\n      // TODO disabled because existing unit tests assume 100\n      // font.size *= defaultHeight / 100 / 0.75\n      break\n    case 'em':\n    case 'rem':\n      font.size *= defaultHeight / 0.75\n      break\n    case 'q':\n      font.size *= 96 / 25.4 / 4\n      break\n  }\n\n  return (cache[str] = font)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}