{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/Fia/opt/my-react-weather-app/node_modules/lottie-react-native/src/LottieView.types.ts"],"sourcesContent":["import type { StyleProp, ViewStyle, LayoutChangeEvent } from 'react-native';\n\n/**\n * Serialized animation as generated from After Effects\n */\nexport interface AnimationObject {\n  v: string;\n  fr: number;\n  ip: number;\n  op: number;\n  w: number;\n  h: number;\n  nm?: string;\n  ddd?: number;\n  assets: any[];\n  layers: any[];\n  markers?: any[];\n}\n\ntype ColorFilter = {\n  keypath: string;\n  color: string;\n};\n\ntype TextFilterIOS = {\n  keypath: string;\n  text: string;\n};\n\ntype TextFilterAndroid = {\n  find: string;\n  replace: string;\n};\n\n/**\n * Properties of the LottieView component\n */\nexport interface LottieViewProps {\n  /**\n   * The source of animation. Can be referenced as a local asset by a string, or remotely\n   * with an object with a `uri` property, or it can be an actual JS object of an\n   * animation, obtained (for example) with something like\n   * `require('../path/to/animation.json')`\n   */\n  source: string | AnimationObject | { uri: string };\n\n  /**\n   * A number between 0 and 1, or an `Animated` number between 0 and 1. This number\n   * represents the normalized progress of the animation. If you update this prop, the\n   * animation will correspondingly update to the frame at that progress value. This\n   * prop is not required if you are using the imperative API.\n   */\n  progress?: number;\n\n  /**\n   * The speed the animation will progress. This only affects the imperative API. The\n   * default value is 1.\n   */\n  speed?: number;\n\n  /**\n   * The duration of the animation in ms. Takes precedence over speed when set.\n   * This only works when source is an actual JS object of an animation.\n   */\n  duration?: number;\n\n  /**\n   * A boolean flag indicating whether or not the animation should loop.\n   */\n  loop?: boolean;\n\n  /**\n   * Style attributes for the view, as expected in a standard `View`:\n   * http://facebook.github.io/react-native/releases/0.39/docs/view.html#style\n   *\n   * **CAVEAT: border styling is not supported.**\n   */\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * Determines how to resize the animated view when the frame doesn't match the raw image\n   * dimensions.\n   *\n   * Refer to https://facebook.github.io/react-native/docs/image.html#resizemode\n   */\n  resizeMode?: 'cover' | 'contain' | 'center';\n\n  /**\n   * Determines how Lottie should render\n   * Refer to LottieAnimationView#setRenderMode(RenderMode) for more information.\n   */\n  renderMode?: 'AUTOMATIC' | 'HARDWARE' | 'SOFTWARE';\n\n  /**\n   * A boolean flag indicating whether or not the animation should start automatically when\n   * mounted. This only affects the imperative API.\n   */\n  autoPlay?: boolean;\n\n  /**\n   * A callback function which will be called when animation is finished. Note that this\n   * callback will be called only when `loop` is set to false.\n   * @platform ios, android\n   */\n  onAnimationFinish?: (isCancelled: boolean) => void;\n\n  /**\n   * A callback function which will be called when animation is failed to load.\n   * @platform ios, android\n   */\n  onAnimationFailure?: (error: string) => void;\n\n  /**\n   * A callback function which will be called when the view has been laid out.\n   */\n  onLayout?: (event: LayoutChangeEvent) => void;\n\n  /**\n   * An array of layers you want to override its color filter.\n   */\n  colorFilters?: Array<ColorFilter>;\n\n  /**\n   * A string to identify the component during testing.\n   */\n  testID?: string;\n\n  // Android Props\n\n  /**\n   * A boolean flag to enable merge patching.\n   * @platform android\n   */\n  enableMergePathsAndroidForKitKatAndAbove?: boolean;\n\n  /**\n   * A boolean flag indicating whether or not the animation should caching. Defaults to true.\n   * Refer to LottieAnimationView#setCacheComposition(boolean) for more information.\n   *\n   * @platform android\n   */\n  cacheComposition?: boolean;\n\n  /**\n   * An array of objects denoting text values to find and replace.\n   *\n   * @platform android\n   */\n  textFiltersAndroid?: Array<TextFilterAndroid>;\n\n  /**\n   * Relative folder inside of assets containing image files to be animated.\n   * Make sure that the images that bodymovin export are in that folder with their names unchanged (should be img_#).\n   * Refer to https://github.com/airbnb/lottie-android#image-support for more details.\n   *\n   * @platform android\n   */\n  imageAssetsFolder?: string;\n\n  /**\n   * Uses hardware acceleration to perform the animation. This should only\n   * be used for animations where your width and height are equal to the composition width\n   * and height, e.g. you are not scaling the animation.\n   *\n   * @platform android\n   */\n  hardwareAccelerationAndroid?: boolean;\n\n  // iOS Props\n\n  /**\n   * An array of objects denoting text layers by KeyPath and a new string value.\n   *\n   * @platform ios\n   */\n  textFiltersIOS?: Array<TextFilterIOS>;\n\n  // Windows Props\n\n  /**\n   * A boolean flag to enable use of platform-level looping on Windows. This improves loop smoothness,\n   * but onAnimationLoop will not fire and changing the loop prop will restart playback.\n   *\n   * @platform windows\n   */\n  useNativeLooping?: boolean;\n\n  /**\n   * A callback function which will be called when the animation loops.\n   *\n   * @platform windows\n   */\n  onAnimationLoop?: () => void;\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}