{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"labelKey\", \"newSelectionPrefix\", \"options\", \"paginationText\", \"renderMenuItemChildren\", \"text\"];\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Highlighter from '../Highlighter';\nimport Menu from '../Menu';\nimport MenuItem from '../MenuItem';\nimport { getOptionLabel, getOptionProperty, isString } from '../../utils';\nvar propTypes = {\n  /**\n   * Provides the ability to specify a prefix before the user-entered text to\n   * indicate that the selection will be new. No-op unless `allowNew={true}`.\n   */\n  newSelectionPrefix: PropTypes.node,\n  /**\n   * Prompt displayed when large data sets are paginated.\n   */\n  paginationText: PropTypes.node,\n  /**\n   * Provides a hook for customized rendering of menu item contents.\n   */\n  renderMenuItemChildren: PropTypes.func\n};\nvar defaultProps = {\n  newSelectionPrefix: 'New selection: ',\n  paginationText: 'Display additional results...',\n  renderMenuItemChildren: function renderMenuItemChildren(option, props) {\n    return /*#__PURE__*/React.createElement(Highlighter, {\n      search: props.text\n    }, getOptionLabel(option, props.labelKey));\n  }\n};\nvar TypeaheadMenu = function TypeaheadMenu(props) {\n  var labelKey = props.labelKey,\n    newSelectionPrefix = props.newSelectionPrefix,\n    options = props.options,\n    paginationText = props.paginationText,\n    renderMenuItemChildren = props.renderMenuItemChildren,\n    text = props.text,\n    menuProps = _objectWithoutProperties(props, _excluded);\n  var renderMenuItem = function renderMenuItem(option, position) {\n    var label = getOptionLabel(option, labelKey);\n    var menuItemProps = {\n      disabled: !!getOptionProperty(option, 'disabled'),\n      label: label,\n      option: option,\n      position: position\n    };\n    if (getOptionProperty(option, 'customOption')) {\n      return /*#__PURE__*/React.createElement(MenuItem, _extends({}, menuItemProps, {\n        className: \"rbt-menu-custom-option\",\n        key: position,\n        label: label\n      }), newSelectionPrefix, /*#__PURE__*/React.createElement(Highlighter, {\n        search: text\n      }, label));\n    }\n    if (getOptionProperty(option, 'paginationOption')) {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        key: \"pagination-option-divider\"\n      }, /*#__PURE__*/React.createElement(Menu.Divider, null), /*#__PURE__*/React.createElement(MenuItem, _extends({}, menuItemProps, {\n        className: \"rbt-menu-pagination-option\",\n        label:\n        // TODO: Fix how (aria-)labels are passed to `MenuItem`.\n        // `paginationText` can be a ReactNode.\n        isString(paginationText) ? paginationText : ''\n      }), paginationText));\n    }\n    return /*#__PURE__*/React.createElement(MenuItem, _extends({}, menuItemProps, {\n      key: position\n    }), renderMenuItemChildren(option, props, position));\n  };\n  return /*#__PURE__*/React.createElement(Menu, _extends({}, menuProps, {\n    key:\n    // Force a re-render if the text changes to ensure that menu\n    // positioning updates correctly.\n    text\n  }), options.map(renderMenuItem));\n};\nTypeaheadMenu.propTypes = propTypes;\nTypeaheadMenu.defaultProps = defaultProps;\nexport default TypeaheadMenu;","map":{"version":3,"names":["_extends","_objectWithoutProperties","_excluded","PropTypes","React","Highlighter","Menu","MenuItem","getOptionLabel","getOptionProperty","isString","propTypes","newSelectionPrefix","node","paginationText","renderMenuItemChildren","func","defaultProps","option","props","createElement","search","text","labelKey","TypeaheadMenu","options","menuProps","renderMenuItem","position","label","menuItemProps","disabled","className","key","Fragment","Divider","map"],"sources":["/Users/Fia/opt/my-react-weather-app/node_modules/react-bootstrap-typeahead/es/components/TypeaheadMenu/TypeaheadMenu.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"labelKey\", \"newSelectionPrefix\", \"options\", \"paginationText\", \"renderMenuItemChildren\", \"text\"];\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Highlighter from '../Highlighter';\nimport Menu from '../Menu';\nimport MenuItem from '../MenuItem';\nimport { getOptionLabel, getOptionProperty, isString } from '../../utils';\nvar propTypes = {\n  /**\n   * Provides the ability to specify a prefix before the user-entered text to\n   * indicate that the selection will be new. No-op unless `allowNew={true}`.\n   */\n  newSelectionPrefix: PropTypes.node,\n\n  /**\n   * Prompt displayed when large data sets are paginated.\n   */\n  paginationText: PropTypes.node,\n\n  /**\n   * Provides a hook for customized rendering of menu item contents.\n   */\n  renderMenuItemChildren: PropTypes.func\n};\nvar defaultProps = {\n  newSelectionPrefix: 'New selection: ',\n  paginationText: 'Display additional results...',\n  renderMenuItemChildren: function renderMenuItemChildren(option, props) {\n    return /*#__PURE__*/React.createElement(Highlighter, {\n      search: props.text\n    }, getOptionLabel(option, props.labelKey));\n  }\n};\n\nvar TypeaheadMenu = function TypeaheadMenu(props) {\n  var labelKey = props.labelKey,\n      newSelectionPrefix = props.newSelectionPrefix,\n      options = props.options,\n      paginationText = props.paginationText,\n      renderMenuItemChildren = props.renderMenuItemChildren,\n      text = props.text,\n      menuProps = _objectWithoutProperties(props, _excluded);\n\n  var renderMenuItem = function renderMenuItem(option, position) {\n    var label = getOptionLabel(option, labelKey);\n    var menuItemProps = {\n      disabled: !!getOptionProperty(option, 'disabled'),\n      label: label,\n      option: option,\n      position: position\n    };\n\n    if (getOptionProperty(option, 'customOption')) {\n      return /*#__PURE__*/React.createElement(MenuItem, _extends({}, menuItemProps, {\n        className: \"rbt-menu-custom-option\",\n        key: position,\n        label: label\n      }), newSelectionPrefix, /*#__PURE__*/React.createElement(Highlighter, {\n        search: text\n      }, label));\n    }\n\n    if (getOptionProperty(option, 'paginationOption')) {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        key: \"pagination-option-divider\"\n      }, /*#__PURE__*/React.createElement(Menu.Divider, null), /*#__PURE__*/React.createElement(MenuItem, _extends({}, menuItemProps, {\n        className: \"rbt-menu-pagination-option\",\n        label: // TODO: Fix how (aria-)labels are passed to `MenuItem`.\n        // `paginationText` can be a ReactNode.\n        isString(paginationText) ? paginationText : ''\n      }), paginationText));\n    }\n\n    return /*#__PURE__*/React.createElement(MenuItem, _extends({}, menuItemProps, {\n      key: position\n    }), renderMenuItemChildren(option, props, position));\n  };\n\n  return /*#__PURE__*/React.createElement(Menu, _extends({}, menuProps, {\n    key: // Force a re-render if the text changes to ensure that menu\n    // positioning updates correctly.\n    text\n  }), options.map(renderMenuItem));\n};\n\nTypeaheadMenu.propTypes = propTypes;\nTypeaheadMenu.defaultProps = defaultProps;\nexport default TypeaheadMenu;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}